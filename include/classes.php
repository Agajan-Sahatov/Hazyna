<?php 	class database{		public $config = array(			'DB_USERNAME' => 'root',			'DB_PASSWORD' => '',			'DB_NAME' => 'dbname='		);		public $t = "";		public $i = 0;		public $n = 0;		public function __construct($dbname){			if((!empty($dbname)) && ($dbname != 'a')){					$this->config['DB_NAME'] .= $dbname;				}else{					$this->config['DB_NAME'] = '';				}			try{				$this->conn = new PDO('mysql:host=localhost;' . $this->config['DB_NAME'], 								$this->config['DB_USERNAME'], 								$this->config['DB_PASSWORD']);				$this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);				return $this->conn;			}catch(PDOException $e){				echo 'ERROR: ' . $e->getMessage();				return false;			}		}		public function query($query, $bindings){			$this->stmt = $this->conn->prepare($query);			return $this->stmt->execute($bindings);		}		public function find($tablename, $columnname, $Ssearch){			try {				$this->result = $this->conn->query('SELECT ' . $columnname . ' FROM ' . $tablename . ' WHERE ' . $columnname . '=' . '\'' . $Ssearch . '\'');				if ($this->result->rowCount()>0){ 						return true;				}else return false;			} catch (Exception $e) {				return false;			}		}		public function getrow($tablename, $columnname, $Ssearch){			try {				$this->result = $this->conn->query('SELECT * ' . ' FROM ' . $tablename . ' WHERE ' . $columnname . '=' . '\'' . $Ssearch . '\'');				if ($this->result->rowCount()>0){ 						return $this->result;				}else return false;			} catch ( Exception $e ){				return false;			}		}			}		class HTML{		public function __construct(){					}		public function link($href, $text){			return "<a href\"=" . $href . "\">" . $text . "</a>";		}		public function items($items){			return "<ul><li>" . implode('</li><li>', $items) . "</li></ul>";		}		public function image($src, $alt = ''){			return "<img src=" . $src . "alt=" . $alt . ">";		}	}		class file{		public function __construct(){					}		public function exists($file){			return file_exists($file);		}		public function size($file){			return filesize($file);		}		public function name($file){			return pathinfo($file, PATHINFO_FILENAME);		}		public function extension($file){			return pathinfo($file, PATHINFO_EXTENSION);		}		public function delete($file){			return unlink($file);		}	}	class str{		public function __construct(){					}		public function length($s){			return preg_match_all( '(.)su', $s )-1;		}		public function divide($s, $l = 30){			$t = "";			$j=0;			$n = preg_match_all( '(.)su', $s )-1;			for($i=0;$i<=$n; $i++){				if($s[$i] == ' '){					$j=0;					$t .= $s[$i];				}else{					if($j>$l){						$t .= ($s[$i] . '<br/>');						$j=0;					}					else{						$t .= $s[$i];						$j++;					}				}			}			return $t;		}		public function show($s, $r){			$n = preg_match_all( '(.)su', $s )-1;			$t = "";			if($n>$r){				for($i=0;$i<=$r-1;$i++){					$t .= $s[$i];				}				$t .= '...';				return $t;			}else{				return $s;			}		}		public function get_friend($s){			$t = "";			$n = preg_match_all( '(.)su', $s )-1;			for( $i=$n; $i>=0; $i-- )				if($s[$i]!='_') $t = $s[$i] . $t; else break;			return $t;		}		public function clean($r){			$t = $r;				$s = '';				for($i=0; $i<=$this->length($t);$i++){					if($t[$i] == "'"){						$s .= "\\'";					}elseif($t[$i] == "\\"){						$s .= "\\\\";					}else{						$s .= $t[$i];					}				}			return $s;		}	}?>